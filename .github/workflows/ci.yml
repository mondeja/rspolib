name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.1"
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pre-commit
      - name: Lint
        run: pre-commit run --all-files --show-diff-on-failure

  test-rust:
    name: Test Rust source
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust-toolchain:
          - stable
          - nightly
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ matrix.rust-toolchain }}
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ matrix.rust-toolchain }}
      - name: Run
        run: cargo test -p rspolib

  test-python:
    name: Test Python bindings
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.8
          - 3.9
          - "3.10"
          - "3.11"
          - "3.12.1"
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/python/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          cd python
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
          pip install .
      - name: Test
        run: python -m pytest -svv

  linux-py-wheels:
    name: Build Linux Python wheels
    runs-on: ubuntu-latest
    needs: [test-rust, test-python]
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          manylinux: auto
          command: build
          args: --release --sdist -o dist --find-interpreter
          working-directory: python
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: linux-wheels
          path: python/dist

  windows-py-wheels:
    name: Build Windows Python wheels
    needs: [test-rust, test-python]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --find-interpreter
          working-directory: python
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: windows-wheels
          path: python/dist

  macos-py-wheels:
    name: Build MacOS Python wheels
    needs: [test-rust, test-python]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --universal2 --find-interpreter
          working-directory: python
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: macos-wheels
          path: python/dist

  test-release-rust-crate:
    name: Test Rust crate release
    needs: test-rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable
      - name: Publish
        run: |
          cd rust
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish -v --dry-run

  test-release-py-wheels:
    name: Test release Python wheels
    runs-on: ubuntu-latest
    needs:
      - macos-py-wheels
      - windows-py-wheels
      - linux-py-wheels
      - lint
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: linux-wheels
          path: linux-wheels
      - uses: actions/download-artifact@v4
        with:
          name: windows-wheels
          path: windows-wheels
      - uses: actions/download-artifact@v4
        with:
          name: macos-wheels
          path: macos-wheels
      - name: List wheels
        run: |
          ls linux-wheels/
          ls windows-wheels/
          ls macos-wheels/
      - name: Move artifacts to wheels/
        run: |
          mkdir wheels
          mv linux-wheels/*.whl wheels/
          mv windows-wheels/*.whl wheels/
          mv macos-wheels/*.whl wheels/
          ls wheels/
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *

  release-rust-crate:
    name: Release Rust crate
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test-release-rust-crate
      - lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable
      - name: Publish
        run: |
          cd rust
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish -v

  release-py-wheels:
    name: Release Python wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test-release-py-wheels
      - release-rust-crate
    steps:
      - uses: actions/download-artifact@v4
      - name: Move artifacts to wheels/
        run: |
          mkdir wheels
          mv linux-wheels/*.whl wheels/
          mv windows-wheels/*.whl wheels/
          mv macos-wheels/*.whl wheels/
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
